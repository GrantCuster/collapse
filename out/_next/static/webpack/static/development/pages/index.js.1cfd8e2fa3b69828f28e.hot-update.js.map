{"version":3,"file":"static/webpack/static/development/pages/index.js.1cfd8e2fa3b69828f28e.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import Head from 'next/head'\nimport React, { useRef, useState, useEffect, useReducer } from 'react'\nimport * as _ from 'lodash'\n\nlet sp = 16\n// let cols = 40\n// let rows = 30\n// let cells = cols * rows\n\nfunction spx(array) {\n  return array.map(v => v * sp)\n}\n\nconst Home = () => {\n  let cref = useRef(null)\n  let clear_ref = useRef(false)\n  let state = useRef({})\n  let km_ref = useRef({})\n  let slider_click_ref = useRef(null)\n  let slider_touch_mode = useRef(false)\n  let press_gates = useRef(false)\n  let [width, setWidth] = useState(null)\n  let file_input = useRef(null)\n\n  function loadImage(src) {\n    let c = cref.current\n    let cx = c.getContext('2d')\n    let img = document.createElement('img')\n    img.onload = () => {\n      let adj_width = Math.min(\n        img.width,\n        Math.floor(window.innerWidth - sp * 2) - sp / 2\n      )\n      let dsp = sp\n      let snapw = Math.round(adj_width / dsp) * dsp\n      let snapr = snapw / img.width\n      let snaph = Math.round((img.height * snapr) / dsp) * dsp\n\n      img.width = snapw\n      img.height = snaph\n\n      setWidth(img.width)\n\n      c.width = img.width\n      c.height = img.height\n\n      let cols = img.width / sp\n      let rows = img.height / sp\n      let cells = cols * rows\n\n      // preserve dimensions\n      let t_img = document.createElement('canvas')\n      t_img.width = c.width\n      t_img.height = c.height\n      let t_imgx = t_img.getContext('2d')\n      t_imgx.drawImage(img, 0, 0, c.width, c.height)\n      img = t_img\n\n      // draw original image\n      // cx.drawImage(img, 0, 0, c.width, c.height)\n\n      // store original image\n      let imc = document.createElement('canvas')\n      imc.width = c.width\n      imc.height = c.height\n      let imx = imc.getContext('2d')\n      imx.drawImage(img, 0, 0, c.width, c.height)\n\n      // cut up original image\n      let tiles = []\n      for (let i = 0; i < cells; i++) {\n        let t = document.createElement('canvas')\n        t.width = sp\n        t.height = sp\n        let tx = t.getContext('2d')\n\n        let x = i % cols\n        let y = Math.floor(i / cols)\n\n        tx.drawImage(imc, x * sp, y * sp, sp, sp, 0, 0, sp, sp)\n\n        let complexity = t.toDataURL().length / (sp * sp)\n\n        tiles.push({ t, c: complexity, x, y, i })\n      }\n      tiles = _.sortBy(tiles, 'c')\n\n      // grid with coordinates\n      let grid = [...Array(rows)].map((n, y) =>\n        [...Array(cols)].map((n, x) => {\n          let d = Math.sqrt(\n            Math.pow(x - cols / 2, 2) + Math.pow(y - rows / 2, 2)\n          ).toFixed(8)\n          return [x, y, d]\n        })\n      )\n\n      // spiral order for iteration\n      let ordered = _.flatten(grid)\n      ordered.sort(function(a, b) {\n        return a[2] - b[2]\n      })\n\n      // spiral test\n      // for (let i = 0; i < 800; i++) {\n      //   let [x, y] = ordered[i]\n      //   cx.fillRect(...spx([x, y, 1, 1]))\n      // }\n\n      let threshold = cells - 300\n      state.current.threshold = threshold\n      state.current.cells = cells\n      state.current.ordered = ordered\n      state.current.grid = grid\n      state.current.cols = cols\n      state.current.rows = rows\n      state.current.imc = imc\n      state.current.tiles = tiles\n\n      render()\n\n      // cx.fillStyle = 'red'\n      // cx.fillRect((cols / 2) * sp - 1, 0, 2, c.height)\n      // cx.fillRect(0, (rows / 2) * sp - 1, c.width, 2)\n      // cx.fillStyle = 'black'\n    }\n    img.src = src\n  }\n\n  function render() {\n    clear_ref.current = false\n    let c = cref.current\n    let cx = c.getContext('2d')\n    let {\n      cells,\n      threshold,\n      ordered,\n      grid,\n      cols,\n      rows,\n      imc,\n      tiles,\n    } = state.current\n\n    // active\n    let active = [...Array(rows)].map((n, y) =>\n      [...Array(cols)].map((n, x) => [x, y, false])\n    )\n    for (let i = threshold; i < cells; i++) {\n      let tile = tiles[i]\n      let x = tile.x\n      let y = tile.y\n      active[y][x][2] = true\n    }\n    console.log(active)\n\n    function getFree(x, y) {\n      // it it off map it is undefined\n      if (active[y] === undefined) return null\n      if (active[y][x] === undefined) return null\n      let check = active[y][x]\n      // false means empty\n      if (check[2] === false) {\n        return grid[y][x]\n      } else {\n        return null\n      }\n      // return if false\n      // if (coords) {\n      //   let [gx, gy] = coords\n      // }\n    }\n\n    function getMove(x, y) {\n      let raw = [\n        [0, -1],\n        [1, -1],\n        [1, 1],\n        [1, 0],\n        [1, 1],\n        [0, 1],\n        [-1, 1],\n        [-1, 0],\n        [-1, -1],\n      ].map(v => getFree(x + v[0], y + v[1]))\n      let self = grid[y][x]\n      let filtered = raw.filter(v => v !== null)\n      let distances = filtered.map(v => parseFloat(v[2]))\n      let min_distance = _.min(distances)\n      if (min_distance < self[2]) {\n        let min_i = distances.indexOf(min_distance)\n        return filtered[min_i]\n      } else {\n        return null\n      }\n    }\n\n    function _render() {\n      let least_active = true\n      let moved = false\n\n      for (let i = 0; i < cells; i++) {\n        let [x, y] = ordered[i]\n        let check = active[y][x]\n        if (check[2] === true) {\n          least_active = false\n          let move_to = getMove(x, y)\n          if (move_to !== null) {\n            moved = true\n            let [mx, my] = move_to\n            // let old = active[my][mx].slice()\n            let old = [null, null, false]\n            active[my][mx] = check\n            active[y][x] = old\n          }\n        }\n      }\n\n      if (least_active) {\n        cx.clearRect(0, 0, c.width, c.height)\n      }\n      if (!moved) {\n        // only draw when done\n        for (let i = 0; i < cells; i++) {\n          let x = i % cols\n          let y = Math.floor(i / cols)\n          let check = active[y][x]\n          if (check[2]) {\n            cx.drawImage(\n              imc,\n              ...spx([...check.slice(0, 2), 1, 1]),\n              ...spx([x, y, 1, 1])\n            )\n          }\n        }\n      } else if (moved && !clear_ref.current) {\n        cx.clearRect(0, 0, c.width, c.height)\n\n        // for (let i = 0; i < cells; i++) {\n        //   let x = i % cols\n        //   let y = Math.floor(i / cols)\n        //   let check = active[y][x]\n        //   // if (check) {\n        //   cx.drawImage(\n        //     imc,\n        //     ...spx([...check.slice(0, 2), 1, 1]),\n        //     ...spx([x, y, 1, 1])\n        //   )\n        //   // }\n        // }\n\n        _render()\n      }\n    }\n\n    _render()\n  }\n\n  useEffect(() => {\n    loadImage('mrrobot2.jpg')\n  })\n\n  function trigger(key) {\n    keyAction(key, null)\n  }\n\n  function keyAction(key, event) {\n    let km = km_ref.current\n    if (event === null) {\n      event = { shiftKey: false }\n    }\n\n    let shift = event.shiftKey\n    key = key.toLowerCase()\n\n    if (key === 'o') {\n      let input = file_input.current\n      function handleChange(e) {\n        let files = ''\n        for (let item of this.files) {\n          console.log(item)\n          files += item.name + '.' + item.type\n          if (item.type.indexOf('image') < 0) {\n            continue\n          }\n          let src = URL.createObjectURL(item)\n          loadImage(src)\n        }\n        this.removeEventListener('change', handleChange)\n      }\n      input.addEventListener('change', handleChange)\n\n      input.dispatchEvent(\n        new MouseEvent('click', {\n          bubbles: true,\n          cancelable: true,\n          view: window,\n        })\n      )\n    } else if (key === 'p') {\n      let link = document.createElement('a')\n\n      cref.current.toBlob(function(blob) {\n        link.setAttribute(\n          'download',\n          'res-' +\n            new Date()\n              .toISOString()\n              .slice(0, -4)\n              .replace(/-/g, '')\n              .replace(/:/g, '')\n              .replace(/_/g, '')\n              .replace(/\\./g, '') +\n            'Z' +\n            '.png'\n        )\n\n        link.setAttribute('href', URL.createObjectURL(blob))\n        link.dispatchEvent(\n          new MouseEvent(`click`, {\n            bubbles: true,\n            cancelable: true,\n            view: window,\n          })\n        )\n      })\n    }\n\n    if (key === 'l' || key === 'arrowright') {\n      let move = 10\n      if (shift) move = 1\n      state.current.threshold = Math.max(0, state.current.threshold - move)\n      clear_ref.current = true\n      render()\n    } else if (key === 'h' || key === 'arrowleft') {\n      let move = 10\n      if (shift) move = 1\n      state.current.threshold = Math.min(\n        state.current.cells,\n        state.current.threshold + move\n      )\n      clear_ref.current = true\n      render()\n    }\n  }\n\n  function downHandler(e) {\n    km_ref.current[e.key] = true\n    keyAction(e.key, e)\n  }\n\n  function upHandler(e) {\n    km_ref.current[e.key] = false\n  }\n\n  function handleMouseMove(e) {\n    if (!slider_touch_mode.current) {\n      if (slider_click_ref.current) {\n        clickSetThreshold(e.clientX)\n      }\n    }\n  }\n\n  function clearer(id) {\n    clear_ref.current.push(id)\n  }\n\n  function clearRepeatIntervals() {\n    for (let i = 0; i < clear_ref.current.length; i++) {\n      let item = clear_ref.current[i]\n      clearInterval(item)\n    }\n    clear_ref.current = []\n  }\n\n  function clearPressGates() {\n    press_gates.current = false\n  }\n\n  function handleMouseUp(e) {\n    if (!slider_touch_mode.current) {\n      if (slider_click_ref.current) {\n        slider_click_ref.current = false\n        clickSetThreshold(e.clientX)\n      }\n    }\n    clearPressGates()\n    clearRepeatIntervals()\n  }\n\n  function onDrop(e) {\n    e.preventDefault()\n    e.stopPropagation()\n    let file = e.dataTransfer.files[0]\n    let filename = file.path ? file.path : file.name ? file.name : ''\n    let src = URL.createObjectURL(file)\n    loadImage(src)\n  }\n\n  function onDrag(e) {\n    e.stopPropagation()\n    e.preventDefault()\n    e.dataTransfer.dropEffect = 'copy'\n  }\n\n  function onPaste(e) {\n    e.preventDefault()\n    e.stopPropagation()\n    for (const item of e.clipboardData.items) {\n      if (item.type.indexOf('image') < 0) {\n        continue\n      }\n      let file = item.getAsFile()\n      let src = URL.createObjectURL(file)\n      loadImage(src)\n    }\n  }\n\n  function handleTouchMove(e) {\n    if (slider_touch_mode.current) {\n      if (slider_click_ref.current) {\n        clickSetThreshold(e.changedTouches[0].clientX)\n        e.preventDefault()\n      }\n    }\n  }\n\n  function handleTouchEnd(e) {\n    // touch end doesn't seem to have client x\n    clearPressGates()\n    clearRepeatIntervals()\n  }\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler)\n    window.addEventListener('keyup', upHandler)\n    window.addEventListener('mousemove', handleMouseMove)\n    window.addEventListener('mouseup', handleMouseUp)\n    window.addEventListener('paste', onPaste)\n    window.addEventListener('dragover', onDrag)\n    window.addEventListener('drop', onDrop)\n    window.addEventListener('touchend', handleTouchEnd)\n    window.addEventListener('touchmove', handleTouchMove, { passive: false })\n    return () => {\n      window.removeEventListener('keydown', downHandler)\n      window.removeEventListener('keyup', upHandler)\n      window.removeEventListener('mousemove', handleMouseMove)\n      window.removeEventListener('mouseup', handleMouseUp)\n      window.removeEventListener('paste', onPaste)\n      window.removeEventListener('dragover', onDrag)\n      window.removeEventListener('drop', onDrop)\n      window.removeEventListener('touchend', handleTouchEnd)\n      window.removeEventListener('touchmove', handleTouchMove)\n    }\n  }, [])\n\n  let title = 'Collapse'\n  // TODO\n  let description =\n    'Selectively de-res image pixels ranked using a compression algorithm.'\n  let share_img_url = 'https://res.constraint.systems/res.png'\n  let og_url = 'https://res.constraint.systems'\n\n  return (\n    <div>\n      <Head>\n        <title>{title}</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <div\n        style={{\n          display: width !== null ? 'block' : 'none',\n          width: width !== null ? width + sp : 'auto',\n          marginLeft: 'auto',\n          marginRight: 'auto',\n        }}\n      >\n        <input type=\"file\" ref={file_input} style={{ display: 'none' }} />\n        <div\n          className=\"no-select\"\n          style={{ paddingLeft: sp / 2, paddingRight: sp / 2 }}\n        >\n          <canvas ref={cref} />\n        </div>\n      </div>\n\n      <style jsx global>{`\n        html,\n        body {\n          padding: 0;\n          margin: 0;\n          font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto,\n            Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue,\n            sans-serif;\n        }\n        * {\n          box-sizing: border-box;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nexport default Home\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAEA;AAGA;AACA;AANA;AACA;AACA;AAQA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AAAA;AACA;AAAA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAUA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AADA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AAdA;AAcA;AAEA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAcA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnBA;AAAA;AAAA;AAsCA;AACA;AACA;;;;A","sourceRoot":""}